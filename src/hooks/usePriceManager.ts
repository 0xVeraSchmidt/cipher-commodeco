import { useState, useEffect, useRef } from 'react';

// ÂÖ®Â±Ä‰ª∑Ê†ºÁä∂ÊÄÅÁÆ°ÁêÜ
interface CommodityPrice {
  symbol: string;
  basePrice: number;
  currentPrice: number;
  volatility: number;
  name: string;
  icon: string;
  color: string;
}

let globalPrices: Record<string, CommodityPrice> = {};
let priceUpdateInterval: NodeJS.Timeout | null = null;
let listeners: Set<() => void> = new Set();

// ÂàùÂßãÂåñÂïÜÂìÅ‰ª∑Ê†º
const initializePrices = () => {
  const commodities = [
    { symbol: 'GOLD', name: 'Gold Futures', basePrice: 1987.45, icon: 'ü•á', color: 'text-yellow-600' },
    { symbol: 'OIL', name: 'Crude Oil', basePrice: 73.21, icon: 'üõ¢Ô∏è', color: 'text-blue-600' },
    { symbol: 'WHEAT', name: 'Wheat Futures', basePrice: 645.75, icon: 'üåæ', color: 'text-green-600' },
    { symbol: 'COPPER', name: 'Copper', basePrice: 8234.5, icon: 'üî∂', color: 'text-orange-600' }
  ];

  commodities.forEach(commodity => {
    globalPrices[commodity.symbol] = {
      ...commodity,
      currentPrice: commodity.basePrice,
      volatility: 0
    };
  });
};

// Êõ¥Êñ∞‰ª∑Ê†ºÊ≥¢Âä®
const updatePriceVolatility = () => {
  Object.keys(globalPrices).forEach(symbol => {
    const commodity = globalPrices[symbol];
    // ÁîüÊàê-0.5%Âà∞0.5%ÁöÑÊ≥¢Âä®
    const volatility = (Math.random() - 0.5) * 0.01; // -0.5% to 0.5%
    const newPrice = commodity.basePrice * (1 + volatility);
    
    globalPrices[symbol] = {
      ...commodity,
      currentPrice: newPrice,
      volatility: volatility
    };
  });

  // ÈÄöÁü•ÊâÄÊúâÁõëÂê¨Âô®
  listeners.forEach(listener => listener());
};

// ÂêØÂä®‰ª∑Ê†ºÊõ¥Êñ∞
const startPriceUpdates = () => {
  if (priceUpdateInterval) return;
  
  priceUpdateInterval = setInterval(updatePriceVolatility, 30000); // ÊØè30ÁßíÊõ¥Êñ∞
};

// ÂÅúÊ≠¢‰ª∑Ê†ºÊõ¥Êñ∞
const stopPriceUpdates = () => {
  if (priceUpdateInterval) {
    clearInterval(priceUpdateInterval);
    priceUpdateInterval = null;
  }
};

export function usePriceManager() {
  const [prices, setPrices] = useState<Record<string, CommodityPrice>>(globalPrices);
  const mountedRef = useRef(true);

  useEffect(() => {
    mountedRef.current = true;

    // ÂàùÂßãÂåñ‰ª∑Ê†º
    if (Object.keys(globalPrices).length === 0) {
      initializePrices();
      setPrices({ ...globalPrices });
    }

    // Ê∑ªÂä†ÁõëÂê¨Âô®
    const listener = () => {
      if (mountedRef.current) {
        setPrices({ ...globalPrices });
      }
    };
    
    listeners.add(listener);

    // ÂêØÂä®‰ª∑Ê†ºÊõ¥Êñ∞
    startPriceUpdates();

    return () => {
      mountedRef.current = false;
      listeners.delete(listener);
      
      // Â¶ÇÊûúÊ≤°ÊúâÁõëÂê¨Âô®‰∫ÜÔºåÂÅúÊ≠¢‰ª∑Ê†ºÊõ¥Êñ∞
      if (listeners.size === 0) {
        stopPriceUpdates();
      }
    };
  }, []);

  return {
    prices,
    getPrice: (symbol: string) => globalPrices[symbol] || null,
    getAllPrices: () => Object.values(globalPrices)
  };
}
